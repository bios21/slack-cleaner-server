'use strict';

const moment = require('moment');
require('colors');

const appname = 'slack-cleaner-server';

module.exports = class Logger {
    static log(message, error) {
        const timestamp = moment().format('DD/MM/YYYY HH:mm:ss');

        console[error ? 'error' : 'log'](`[${ appname }]`.yellow, `[${ timestamp.green }]`, message);
    }

    static warn(message) {
        Logger.log(message.yellow.inverse);
    }

    static info(message) {
        Logger.log(message.blue);
    }

    static error(message, e) {
        Logger.log(`[ERROR] ${ message }`.red, true);
        if (!!e) {
            Logger.log(e, true);
        }
    }

    static debug() {
        var _console;

        (_console = console).log.apply(_console, arguments);
    }

    static dir(obj) {
        const timestamp = moment().format('DD/MM/YYYY HH:mm:ss');

        const THE_OBJECT_OF_THE_DEAD = JSON.stringify(obj);
        if (THE_OBJECT_OF_THE_DEAD) {
            console.log(`[${ appname }]`.yellow, `[${ timestamp.green }]`, (typeof obj).bold, THE_OBJECT_OF_THE_DEAD.bold.magenta);
        } else {
            console.log(`[${ appname }]`.yellow, `[${ timestamp.green }]`, (typeof obj).bold);
            console.dir(obj);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL2xvZ2dlci5qcyJdLCJuYW1lcyI6WyJtb21lbnQiLCJyZXF1aXJlIiwiYXBwbmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJMb2dnZXIiLCJsb2ciLCJtZXNzYWdlIiwiZXJyb3IiLCJ0aW1lc3RhbXAiLCJmb3JtYXQiLCJjb25zb2xlIiwieWVsbG93IiwiZ3JlZW4iLCJ3YXJuIiwiaW52ZXJzZSIsImluZm8iLCJibHVlIiwiZSIsInJlZCIsImRlYnVnIiwiZGlyIiwib2JqIiwiVEhFX09CSkVDVF9PRl9USEVfREVBRCIsIkpTT04iLCJzdHJpbmdpZnkiLCJib2xkIiwibWFnZW50YSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBUUEsU0FBU0MsUUFBUSxRQUFSLENBQWpCO0FBQ1FBLFFBQVEsUUFBUjs7QUFFUixNQUFNQyxVQUFVLHNCQUFoQjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQixNQUFNQyxNQUFOLENBQWE7QUFDMUIsV0FBT0MsR0FBUCxDQUFXQyxPQUFYLEVBQW9CQyxLQUFwQixFQUEyQjtBQUN2QixjQUFNQyxZQUFZVCxTQUFTVSxNQUFULENBQWdCLHFCQUFoQixDQUFsQjs7QUFFQUMsZ0JBQVFILFFBQVEsT0FBUixHQUFrQixLQUExQixFQUFrQyxLQUFHTixPQUFRLElBQVosQ0FBZVUsTUFBaEQsRUFBeUQsS0FBR0gsVUFBVUksS0FBTSxJQUE1RSxFQUFnRk4sT0FBaEY7QUFDSDs7QUFFRCxXQUFPTyxJQUFQLENBQVlQLE9BQVosRUFBcUI7QUFDakJGLGVBQU9DLEdBQVAsQ0FBV0MsUUFBUUssTUFBUixDQUFlRyxPQUExQjtBQUNIOztBQUVELFdBQU9DLElBQVAsQ0FBWVQsT0FBWixFQUFxQjtBQUNqQkYsZUFBT0MsR0FBUCxDQUFXQyxRQUFRVSxJQUFuQjtBQUNIOztBQUVELFdBQU9ULEtBQVAsQ0FBYUQsT0FBYixFQUFzQlcsQ0FBdEIsRUFBeUI7QUFDckJiLGVBQU9DLEdBQVAsQ0FBWSxZQUFVQyxPQUFRLEdBQW5CLENBQXFCWSxHQUFoQyxFQUFxQyxJQUFyQztBQUNBLFlBQUksQ0FBQyxDQUFDRCxDQUFOLEVBQVM7QUFDTGIsbUJBQU9DLEdBQVAsQ0FBV1ksQ0FBWCxFQUFjLElBQWQ7QUFDSDtBQUNKOztBQUVELFdBQU9FLEtBQVAsR0FBcUI7QUFBQTs7QUFDakIsNkJBQVFkLEdBQVI7QUFDSDs7QUFFRCxXQUFPZSxHQUFQLENBQVdDLEdBQVgsRUFBZ0I7QUFDWixjQUFNYixZQUFZVCxTQUFTVSxNQUFULENBQWdCLHFCQUFoQixDQUFsQjs7QUFFQSxjQUFNYSx5QkFBeUJDLEtBQUtDLFNBQUwsQ0FBZUgsR0FBZixDQUEvQjtBQUNBLFlBQUlDLHNCQUFKLEVBQTRCO0FBQ3hCWixvQkFBUUwsR0FBUixDQUNLLEtBQUdKLE9BQVEsSUFBWixDQUFlVSxNQURuQixFQUVLLEtBQUdILFVBQVVJLEtBQU0sSUFGeEIsRUFHSSxDQUFDLE9BQU9TLEdBQVIsRUFBYUksSUFIakIsRUFJSUgsdUJBQXVCRyxJQUF2QixDQUE0QkMsT0FKaEM7QUFLSCxTQU5ELE1BTU87QUFDSGhCLG9CQUFRTCxHQUFSLENBQ0ssS0FBR0osT0FBUSxJQUFaLENBQWVVLE1BRG5CLEVBRUssS0FBR0gsVUFBVUksS0FBTSxJQUZ4QixFQUdJLENBQUMsT0FBT1MsR0FBUixFQUFhSSxJQUhqQjtBQUlBZixvQkFBUVUsR0FBUixDQUFZQyxHQUFaO0FBQ0g7QUFDSjtBQTNDeUIsQ0FBOUIiLCJmaWxlIjoidXRpbHMvbG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCAgIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuICAgICAgICByZXF1aXJlKCdjb2xvcnMnKTtcblxuY29uc3QgYXBwbmFtZSA9ICdzbGFjay1jbGVhbmVyLXNlcnZlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgTG9nZ2VyIHtcbiAgICBzdGF0aWMgbG9nKG1lc3NhZ2UsIGVycm9yKSB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG1vbWVudCgpLmZvcm1hdCgnREQvTU0vWVlZWSBISDptbTpzcycpO1xuXG4gICAgICAgIGNvbnNvbGVbZXJyb3IgPyAnZXJyb3InIDogJ2xvZyddKGBbJHthcHBuYW1lfV1gLnllbGxvdywgYFske3RpbWVzdGFtcC5ncmVlbn1dYCwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHdhcm4obWVzc2FnZSkge1xuICAgICAgICBMb2dnZXIubG9nKG1lc3NhZ2UueWVsbG93LmludmVyc2UpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpbmZvKG1lc3NhZ2UpIHtcbiAgICAgICAgTG9nZ2VyLmxvZyhtZXNzYWdlLmJsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBlcnJvcihtZXNzYWdlLCBlKSB7XG4gICAgICAgIExvZ2dlci5sb2coYFtFUlJPUl0gJHttZXNzYWdlfWAucmVkLCB0cnVlKTtcbiAgICAgICAgaWYgKCEhZSkge1xuICAgICAgICAgICAgTG9nZ2VyLmxvZyhlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBkZWJ1ZyguLi5vYmopIHtcbiAgICAgICAgY29uc29sZS5sb2coLi4ub2JqKTtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGRpcihvYmopIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbW9tZW50KCkuZm9ybWF0KCdERC9NTS9ZWVlZIEhIOm1tOnNzJyk7XG5cbiAgICAgICAgY29uc3QgVEhFX09CSkVDVF9PRl9USEVfREVBRCA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgIGlmIChUSEVfT0JKRUNUX09GX1RIRV9ERUFEKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgWyR7YXBwbmFtZX1dYC55ZWxsb3csXG4gICAgICAgICAgICAgICAgYFske3RpbWVzdGFtcC5ncmVlbn1dYCxcbiAgICAgICAgICAgICAgICAodHlwZW9mIG9iaikuYm9sZCxcbiAgICAgICAgICAgICAgICBUSEVfT0JKRUNUX09GX1RIRV9ERUFELmJvbGQubWFnZW50YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBgWyR7YXBwbmFtZX1dYC55ZWxsb3csXG4gICAgICAgICAgICAgICAgYFske3RpbWVzdGFtcC5ncmVlbn1dYCxcbiAgICAgICAgICAgICAgICAodHlwZW9mIG9iaikuYm9sZCk7XG4gICAgICAgICAgICBjb25zb2xlLmRpcihvYmopO1xuICAgICAgICB9XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
