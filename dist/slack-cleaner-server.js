'use strict';

const Logger = require('./utils/logger'),
      express = require('express'),
      slack = require('slack');

function deleteSlackMessages(token, channel_id) {
    return new Promise((ok, ko) => {
        slack.channels.history({ token: token, channel: channel_id }, (err, data) => {
            if (err) {
                Logger.error(`Can't get history message`);
                ko(err);
            }

            ok(data.messages);
        });
    }).then(messages => {
        Logger.log(messages);
        messages.forEach(m => {
            slack.chat.delete({ token: token, ts: m.ts, channel: channel_id }, (err, data) => {
                if (err) {
                    Logger.error(`Can't delete message`);
                    throw err;
                }
            });
        });
        return true;
    });
}

module.exports = () => {
    const app = express();

    app.all('/delete/:token/:channel_id', (req, res) => {
        Logger.log(req.params);
        let token = req.params.token,
            channel_id = req.params.channel_id,
            team_domain = req.params.team_domain,
            channel_name = req.params.channel_name;

        Logger.info(`Called for ${ team_domain } on channel ${ channel_name } with token ${ token }`);

        deleteSlackMessages(token, channel_id).then(good => {
            if (good === true) {
                res.status(200);
            } else {
                res.status(500);
            }
            res.end(null);
        }).catch(err => {
            Logger.error(err);
            res.status(500);
            res.end(null);
        });
    });

    var server = app.listen(5140, () => {
        Logger.log(`Slack cleaner server will be ready soon on ${ server.address().address }:${ server.address().port }`);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNsYWNrLWNsZWFuZXItc2VydmVyLmpzIl0sIm5hbWVzIjpbIkxvZ2dlciIsInJlcXVpcmUiLCJleHByZXNzIiwic2xhY2siLCJkZWxldGVTbGFja01lc3NhZ2VzIiwidG9rZW4iLCJjaGFubmVsX2lkIiwiUHJvbWlzZSIsIm9rIiwia28iLCJjaGFubmVscyIsImhpc3RvcnkiLCJjaGFubmVsIiwiZXJyIiwiZGF0YSIsImVycm9yIiwibWVzc2FnZXMiLCJ0aGVuIiwibG9nIiwiZm9yRWFjaCIsIm0iLCJjaGF0IiwiZGVsZXRlIiwidHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwiYWxsIiwicmVxIiwicmVzIiwicGFyYW1zIiwidGVhbV9kb21haW4iLCJjaGFubmVsX25hbWUiLCJpbmZvIiwiZ29vZCIsInN0YXR1cyIsImVuZCIsImNhdGNoIiwic2VydmVyIiwibGlzdGVuIiwiYWRkcmVzcyIsInBvcnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQVVBLE1BQVFBLFNBQVNDLFFBQVEsZ0JBQVIsQ0FBakI7QUFBQSxNQUNRQyxVQUFVRCxRQUFRLFNBQVIsQ0FEbEI7QUFBQSxNQUVRRSxRQUFRRixRQUFRLE9BQVIsQ0FGaEI7O0FBU0EsU0FBU0csbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxVQUFwQyxFQUFnRDtBQUM1QyxXQUFRLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxFQUFELEVBQUtDLEVBQUwsS0FBWTtBQUM1Qk4sY0FBTU8sUUFBTixDQUFlQyxPQUFmLENBQXVCLEVBQUNOLE9BQU1BLEtBQVAsRUFBY08sU0FBU04sVUFBdkIsRUFBdkIsRUFBMkQsQ0FBQ08sR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDdEUsZ0JBQUlELEdBQUosRUFBUztBQUNMYix1QkFBT2UsS0FBUCxDQUFjLDJCQUFkO0FBQ0FOLG1CQUFHSSxHQUFIO0FBQ0g7O0FBRURMLGVBQUdNLEtBQUtFLFFBQVI7QUFDSCxTQVBEO0FBUUgsS0FUTyxDQUFELENBU0hDLElBVEcsQ0FTRUQsWUFBWTtBQUNqQmhCLGVBQU9rQixHQUFQLENBQVdGLFFBQVg7QUFDQUEsaUJBQVNHLE9BQVQsQ0FBaUJDLEtBQUs7QUFDbEJqQixrQkFBTWtCLElBQU4sQ0FBV0MsTUFBWCxDQUFrQixFQUFDakIsT0FBTUEsS0FBUCxFQUFja0IsSUFBR0gsRUFBRUcsRUFBbkIsRUFBdUJYLFNBQVFOLFVBQS9CLEVBQWxCLEVBQThELENBQUNPLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQ3pFLG9CQUFJRCxHQUFKLEVBQVM7QUFDTGIsMkJBQU9lLEtBQVAsQ0FBYyxzQkFBZDtBQUNBLDBCQUFNRixHQUFOO0FBQ0g7QUFDSixhQUxEO0FBTUgsU0FQRDtBQVFBLGVBQU8sSUFBUDtBQUNILEtBcEJNLENBQVA7QUFxQkg7O0FBRURXLE9BQU9DLE9BQVAsR0FBaUIsTUFBTTtBQUNuQixVQUFNQyxNQUFNeEIsU0FBWjs7QUFFQXdCLFFBQUlDLEdBQUosQ0FBUSw0QkFBUixFQUFzQyxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNoRDdCLGVBQU9rQixHQUFQLENBQVdVLElBQUlFLE1BQWY7QUFDQSxZQUFJekIsUUFBUXVCLElBQUlFLE1BQUosQ0FBV3pCLEtBQXZCO0FBQUEsWUFDSUMsYUFBYXNCLElBQUlFLE1BQUosQ0FBV3hCLFVBRDVCO0FBQUEsWUFFSXlCLGNBQWNILElBQUlFLE1BQUosQ0FBV0MsV0FGN0I7QUFBQSxZQUdJQyxlQUFlSixJQUFJRSxNQUFKLENBQVdFLFlBSDlCOztBQUtBaEMsZUFBT2lDLElBQVAsQ0FBYSxlQUFhRixXQUFZLGlCQUFjQyxZQUFhLGlCQUFjM0IsS0FBTSxHQUFyRjs7QUFFQUQsNEJBQW9CQyxLQUFwQixFQUEyQkMsVUFBM0IsRUFBdUNXLElBQXZDLENBQTRDaUIsUUFBUTtBQUNoRCxnQkFBSUEsU0FBUyxJQUFiLEVBQW1CO0FBQ2ZMLG9CQUFJTSxNQUFKLENBQVcsR0FBWDtBQUNILGFBRkQsTUFFTztBQUNITixvQkFBSU0sTUFBSixDQUFXLEdBQVg7QUFDSDtBQUNETixnQkFBSU8sR0FBSixDQUFRLElBQVI7QUFDSCxTQVBELEVBT0dDLEtBUEgsQ0FPU3hCLE9BQU87QUFDWmIsbUJBQU9lLEtBQVAsQ0FBYUYsR0FBYjtBQUNBZ0IsZ0JBQUlNLE1BQUosQ0FBVyxHQUFYO0FBQ0FOLGdCQUFJTyxHQUFKLENBQVEsSUFBUjtBQUNILFNBWEQ7QUFZSCxLQXJCRDs7QUF1QkEsUUFBSUUsU0FBU1osSUFBSWEsTUFBSixDQUFXLElBQVgsRUFBaUIsTUFBTTtBQUNoQ3ZDLGVBQU9rQixHQUFQLENBQVksK0NBQTZDb0IsT0FBT0UsT0FBUCxHQUFpQkEsT0FBUSxNQUFHRixPQUFPRSxPQUFQLEdBQWlCQyxJQUFLLEdBQTNHO0FBQ0gsS0FGWSxDQUFiO0FBR0gsQ0E3QkQiLCJmaWxlIjoic2xhY2stY2xlYW5lci1zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBzbGFjay1jbGVhbmVyLXNlcnZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL2Jpb3MyMS9zbGFjay1jbGVhbmVyLXNlcnZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBMaWxpYW4gU2FnZXQtTGV0aGlhcyA8bGlsaWFuLnNhZ2V0bGV0aGlhc0BnbWFpbC5jb20+XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKi9cblxuY29uc3QgICBMb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzL2xvZ2dlcicpLFxuICAgICAgICBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpLFxuICAgICAgICBzbGFjayA9IHJlcXVpcmUoJ3NsYWNrJyk7XG5cbi8qKlxuICogQHBhcmFtIHRva2VuXG4gKiBAcGFyYW0gY2hhbm5lbF9pZFxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZVNsYWNrTWVzc2FnZXModG9rZW4sIGNoYW5uZWxfaWQpIHtcbiAgICByZXR1cm4gKG5ldyBQcm9taXNlKChvaywga28pID0+IHtcbiAgICAgICAgc2xhY2suY2hhbm5lbHMuaGlzdG9yeSh7dG9rZW46dG9rZW4sIGNoYW5uZWw6IGNoYW5uZWxfaWR9LCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKGBDYW4ndCBnZXQgaGlzdG9yeSBtZXNzYWdlYCk7XG4gICAgICAgICAgICAgICAga28oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgb2soZGF0YS5tZXNzYWdlcyk7XG4gICAgICAgIH0pO1xuICAgIH0pKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgTG9nZ2VyLmxvZyhtZXNzYWdlcyk7XG4gICAgICAgIG1lc3NhZ2VzLmZvckVhY2gobSA9PiB7XG4gICAgICAgICAgICBzbGFjay5jaGF0LmRlbGV0ZSh7dG9rZW46dG9rZW4sIHRzOm0udHMsIGNoYW5uZWw6Y2hhbm5lbF9pZH0sIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5lcnJvcihgQ2FuJ3QgZGVsZXRlIG1lc3NhZ2VgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgICBcbiAgICBhcHAuYWxsKCcvZGVsZXRlLzp0b2tlbi86Y2hhbm5lbF9pZCcsIChyZXEsIHJlcykgPT4ge1xuICAgICAgICBMb2dnZXIubG9nKHJlcS5wYXJhbXMpO1xuICAgICAgICBsZXQgdG9rZW4gPSByZXEucGFyYW1zLnRva2VuLFxuICAgICAgICAgICAgY2hhbm5lbF9pZCA9IHJlcS5wYXJhbXMuY2hhbm5lbF9pZCxcbiAgICAgICAgICAgIHRlYW1fZG9tYWluID0gcmVxLnBhcmFtcy50ZWFtX2RvbWFpbixcbiAgICAgICAgICAgIGNoYW5uZWxfbmFtZSA9IHJlcS5wYXJhbXMuY2hhbm5lbF9uYW1lO1xuICAgICAgICBcbiAgICAgICAgTG9nZ2VyLmluZm8oYENhbGxlZCBmb3IgJHt0ZWFtX2RvbWFpbn0gb24gY2hhbm5lbCAke2NoYW5uZWxfbmFtZX0gd2l0aCB0b2tlbiAke3Rva2VufWApO1xuXG4gICAgICAgIGRlbGV0ZVNsYWNrTWVzc2FnZXModG9rZW4sIGNoYW5uZWxfaWQpLnRoZW4oZ29vZCA9PiB7XG4gICAgICAgICAgICBpZiAoZ29vZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmVuZChudWxsKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIExvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApO1xuICAgICAgICAgICAgcmVzLmVuZChudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgdmFyIHNlcnZlciA9IGFwcC5saXN0ZW4oNTE0MCwgKCkgPT4ge1xuICAgICAgICBMb2dnZXIubG9nKGBTbGFjayBjbGVhbmVyIHNlcnZlciB3aWxsIGJlIHJlYWR5IHNvb24gb24gJHtzZXJ2ZXIuYWRkcmVzcygpLmFkZHJlc3N9OiR7c2VydmVyLmFkZHJlc3MoKS5wb3J0fWApO1xuICAgIH0pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
