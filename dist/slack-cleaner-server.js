'use strict';

const Logger = require('./utils/logger'),
      express = require('express'),
      slack = require('slack'),
      bodyParser = require('body-parser');

var overflow_indicator = 0;

function deleteSlackMessages(token, channel_id) {
    return new Promise((ok, ko) => {
        slack.channels.history({ token: token, channel: channel_id }, (err, data) => {
            if (err) {
                Logger.error(`Can't get history message`);
                ko(err);
            }

            if (data.messages) {
                overflow_indicator--;
                if (overflow_indicator < 0) {
                    overflow_indicator = 0;
                }
                ok(data.messages);
            } else {
                if (overflow_indicator < 3) {
                    ko('Overflow');
                } else {
                    ko();
                }
                overflow_indicator++;
            }
        });
    }).then(messages => {
        messages.forEach(m => {
            slack.chat.delete({ token: token, ts: m.ts, channel: channel_id }, (err, data) => {
                if (err) {
                    Logger.error(`Can't delete message`);
                }
            });
        });
        return true;
    });
}

module.exports = () => {
    const app = express();

    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: true }));

    app.all('/delete/:secret/', (req, res) => {
        Logger.log(req.params);
        let token = req.params.secret,
            channel_id = req.body.channel_id,
            team_domain = req.body.team_domain,
            channel_name = req.body.channel_name;

        Logger.info(`Called for ${ team_domain } on channel ${ channel_name } (id:${ channel_id }) with token ${ token }`);

        deleteSlackMessages(token, channel_id).then(good => {
            if (good === true) {
                res.status(200);
            } else {
                res.status(500);
            }
            res.end(null);
        }).catch(err => {
            err && Logger.error(err);
            res.status(500);
            res.end(null);
        });
    });

    var server = app.listen(5140, () => {
        Logger.log(`Slack cleaner server will be ready soon on ${ server.address().address }:${ server.address().port }`);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNsYWNrLWNsZWFuZXItc2VydmVyLmpzIl0sIm5hbWVzIjpbIkxvZ2dlciIsInJlcXVpcmUiLCJleHByZXNzIiwic2xhY2siLCJib2R5UGFyc2VyIiwib3ZlcmZsb3dfaW5kaWNhdG9yIiwiZGVsZXRlU2xhY2tNZXNzYWdlcyIsInRva2VuIiwiY2hhbm5lbF9pZCIsIlByb21pc2UiLCJvayIsImtvIiwiY2hhbm5lbHMiLCJoaXN0b3J5IiwiY2hhbm5lbCIsImVyciIsImRhdGEiLCJlcnJvciIsIm1lc3NhZ2VzIiwidGhlbiIsImZvckVhY2giLCJtIiwiY2hhdCIsImRlbGV0ZSIsInRzIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJhbGwiLCJyZXEiLCJyZXMiLCJsb2ciLCJwYXJhbXMiLCJzZWNyZXQiLCJib2R5IiwidGVhbV9kb21haW4iLCJjaGFubmVsX25hbWUiLCJpbmZvIiwiZ29vZCIsInN0YXR1cyIsImVuZCIsImNhdGNoIiwic2VydmVyIiwibGlzdGVuIiwiYWRkcmVzcyIsInBvcnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQVVBLE1BQVFBLFNBQVNDLFFBQVEsZ0JBQVIsQ0FBakI7QUFBQSxNQUNRQyxVQUFVRCxRQUFRLFNBQVIsQ0FEbEI7QUFBQSxNQUVRRSxRQUFRRixRQUFRLE9BQVIsQ0FGaEI7QUFBQSxNQUdRRyxhQUFhSCxRQUFRLGFBQVIsQ0FIckI7O0FBS0EsSUFBSUkscUJBQXFCLENBQXpCOztBQU9BLFNBQVNDLG1CQUFULENBQTZCQyxLQUE3QixFQUFvQ0MsVUFBcEMsRUFBZ0Q7QUFDNUMsV0FBUSxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsRUFBRCxFQUFLQyxFQUFMLEtBQVk7QUFDNUJSLGNBQU1TLFFBQU4sQ0FBZUMsT0FBZixDQUF1QixFQUFDTixPQUFPQSxLQUFSLEVBQWVPLFNBQVNOLFVBQXhCLEVBQXZCLEVBQTRELENBQUNPLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQ3ZFLGdCQUFJRCxHQUFKLEVBQVM7QUFDTGYsdUJBQU9pQixLQUFQLENBQWMsMkJBQWQ7QUFDQU4sbUJBQUdJLEdBQUg7QUFDSDs7QUFFRCxnQkFBSUMsS0FBS0UsUUFBVCxFQUFtQjtBQUNmYjtBQUNBLG9CQUFJQSxxQkFBcUIsQ0FBekIsRUFBNEI7QUFDeEJBLHlDQUFxQixDQUFyQjtBQUNIO0FBQ0RLLG1CQUFHTSxLQUFLRSxRQUFSO0FBQ0gsYUFORCxNQU1PO0FBQ0gsb0JBQUliLHFCQUFxQixDQUF6QixFQUE0QjtBQUN4Qk0sdUJBQUcsVUFBSDtBQUNILGlCQUZELE1BRU87QUFDSEE7QUFDSDtBQUNETjtBQUNIO0FBQ0osU0FwQkQ7QUFxQkgsS0F0Qk8sQ0FBRCxDQXNCSGMsSUF0QkcsQ0FzQkVELFlBQVk7QUFDakJBLGlCQUFTRSxPQUFULENBQWlCQyxLQUFLO0FBQ2xCbEIsa0JBQU1tQixJQUFOLENBQVdDLE1BQVgsQ0FBa0IsRUFBQ2hCLE9BQU9BLEtBQVIsRUFBZWlCLElBQUlILEVBQUVHLEVBQXJCLEVBQXlCVixTQUFTTixVQUFsQyxFQUFsQixFQUFpRSxDQUFDTyxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUM1RSxvQkFBSUQsR0FBSixFQUFTO0FBQ0xmLDJCQUFPaUIsS0FBUCxDQUFjLHNCQUFkO0FBQ0g7QUFDSixhQUpEO0FBS0gsU0FORDtBQU9BLGVBQU8sSUFBUDtBQUNILEtBL0JNLENBQVA7QUFnQ0g7O0FBRURRLE9BQU9DLE9BQVAsR0FBaUIsTUFBTTtBQUNuQixVQUFNQyxNQUFNekIsU0FBWjs7QUFFQXlCLFFBQUlDLEdBQUosQ0FBUXhCLFdBQVd5QixJQUFYLEVBQVI7QUFDQUYsUUFBSUMsR0FBSixDQUFReEIsV0FBVzBCLFVBQVgsQ0FBc0IsRUFBQ0MsVUFBVSxJQUFYLEVBQXRCLENBQVI7O0FBRUFKLFFBQUlLLEdBQUosQ0FBUSxrQkFBUixFQUE0QixDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUN0Q2xDLGVBQU9tQyxHQUFQLENBQVdGLElBQUlHLE1BQWY7QUFDQSxZQUFJN0IsUUFBUTBCLElBQUlHLE1BQUosQ0FBV0MsTUFBdkI7QUFBQSxZQUNJN0IsYUFBYXlCLElBQUlLLElBQUosQ0FBUzlCLFVBRDFCO0FBQUEsWUFFSStCLGNBQWNOLElBQUlLLElBQUosQ0FBU0MsV0FGM0I7QUFBQSxZQUdJQyxlQUFlUCxJQUFJSyxJQUFKLENBQVNFLFlBSDVCOztBQUtBeEMsZUFBT3lDLElBQVAsQ0FBYSxlQUFhRixXQUFZLGlCQUFjQyxZQUFhLFVBQU9oQyxVQUFXLGtCQUFlRCxLQUFNLEdBQXhHOztBQUVBRCw0QkFBb0JDLEtBQXBCLEVBQTJCQyxVQUEzQixFQUF1Q1csSUFBdkMsQ0FBNEN1QixRQUFRO0FBQ2hELGdCQUFJQSxTQUFTLElBQWIsRUFBbUI7QUFDZlIsb0JBQUlTLE1BQUosQ0FBVyxHQUFYO0FBQ0gsYUFGRCxNQUVPO0FBQ0hULG9CQUFJUyxNQUFKLENBQVcsR0FBWDtBQUNIO0FBQ0RULGdCQUFJVSxHQUFKLENBQVEsSUFBUjtBQUNILFNBUEQsRUFPR0MsS0FQSCxDQU9TOUIsT0FBTztBQUNaQSxtQkFBT2YsT0FBT2lCLEtBQVAsQ0FBYUYsR0FBYixDQUFQO0FBQ0FtQixnQkFBSVMsTUFBSixDQUFXLEdBQVg7QUFDQVQsZ0JBQUlVLEdBQUosQ0FBUSxJQUFSO0FBQ0gsU0FYRDtBQVlILEtBckJEOztBQXVCQSxRQUFJRSxTQUFTbkIsSUFBSW9CLE1BQUosQ0FBVyxJQUFYLEVBQWlCLE1BQU07QUFDaEMvQyxlQUFPbUMsR0FBUCxDQUFZLCtDQUE2Q1csT0FBT0UsT0FBUCxHQUFpQkEsT0FBUSxNQUFHRixPQUFPRSxPQUFQLEdBQWlCQyxJQUFLLEdBQTNHO0FBQ0gsS0FGWSxDQUFiO0FBR0gsQ0FoQ0QiLCJmaWxlIjoic2xhY2stY2xlYW5lci1zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBzbGFjay1jbGVhbmVyLXNlcnZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL2Jpb3MyMS9zbGFjay1jbGVhbmVyLXNlcnZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBMaWxpYW4gU2FnZXQtTGV0aGlhcyA8bGlsaWFuLnNhZ2V0bGV0aGlhc0BnbWFpbC5jb20+XG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgSVNDIGxpY2Vuc2UuXG4gKi9cblxuY29uc3QgICBMb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzL2xvZ2dlcicpLFxuICAgICAgICBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpLFxuICAgICAgICBzbGFjayA9IHJlcXVpcmUoJ3NsYWNrJyksXG4gICAgICAgIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xuXG52YXIgb3ZlcmZsb3dfaW5kaWNhdG9yID0gMDtcblxuLyoqXG4gKiBAcGFyYW0gdG9rZW5cbiAqIEBwYXJhbSBjaGFubmVsX2lkXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gZGVsZXRlU2xhY2tNZXNzYWdlcyh0b2tlbiwgY2hhbm5lbF9pZCkge1xuICAgIHJldHVybiAobmV3IFByb21pc2UoKG9rLCBrbykgPT4ge1xuICAgICAgICBzbGFjay5jaGFubmVscy5oaXN0b3J5KHt0b2tlbjogdG9rZW4sIGNoYW5uZWw6IGNoYW5uZWxfaWR9LCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKGBDYW4ndCBnZXQgaGlzdG9yeSBtZXNzYWdlYCk7XG4gICAgICAgICAgICAgICAga28oZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEubWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd19pbmRpY2F0b3ItLTtcbiAgICAgICAgICAgICAgICBpZiAob3ZlcmZsb3dfaW5kaWNhdG9yIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd19pbmRpY2F0b3IgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvayhkYXRhLm1lc3NhZ2VzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG92ZXJmbG93X2luZGljYXRvciA8IDMpIHtcbiAgICAgICAgICAgICAgICAgICAga28oJ092ZXJmbG93Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAga28oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dfaW5kaWNhdG9yKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgbWVzc2FnZXMuZm9yRWFjaChtID0+IHtcbiAgICAgICAgICAgIHNsYWNrLmNoYXQuZGVsZXRlKHt0b2tlbjogdG9rZW4sIHRzOiBtLnRzLCBjaGFubmVsOiBjaGFubmVsX2lkfSwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLmVycm9yKGBDYW4ndCBkZWxldGUgbWVzc2FnZWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuICAgIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICAgIGFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHtleHRlbmRlZDogdHJ1ZX0pKTtcblxuICAgIGFwcC5hbGwoJy9kZWxldGUvOnNlY3JldC8nLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgTG9nZ2VyLmxvZyhyZXEucGFyYW1zKTtcbiAgICAgICAgbGV0IHRva2VuID0gcmVxLnBhcmFtcy5zZWNyZXQsXG4gICAgICAgICAgICBjaGFubmVsX2lkID0gcmVxLmJvZHkuY2hhbm5lbF9pZCxcbiAgICAgICAgICAgIHRlYW1fZG9tYWluID0gcmVxLmJvZHkudGVhbV9kb21haW4sXG4gICAgICAgICAgICBjaGFubmVsX25hbWUgPSByZXEuYm9keS5jaGFubmVsX25hbWU7XG5cbiAgICAgICAgTG9nZ2VyLmluZm8oYENhbGxlZCBmb3IgJHt0ZWFtX2RvbWFpbn0gb24gY2hhbm5lbCAke2NoYW5uZWxfbmFtZX0gKGlkOiR7Y2hhbm5lbF9pZH0pIHdpdGggdG9rZW4gJHt0b2tlbn1gKTtcblxuICAgICAgICBkZWxldGVTbGFja01lc3NhZ2VzKHRva2VuLCBjaGFubmVsX2lkKS50aGVuKGdvb2QgPT4ge1xuICAgICAgICAgICAgaWYgKGdvb2QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5lbmQobnVsbCk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBlcnIgJiYgTG9nZ2VyLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMCk7XG4gICAgICAgICAgICByZXMuZW5kKG51bGwpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBzZXJ2ZXIgPSBhcHAubGlzdGVuKDUxNDAsICgpID0+IHtcbiAgICAgICAgTG9nZ2VyLmxvZyhgU2xhY2sgY2xlYW5lciBzZXJ2ZXIgd2lsbCBiZSByZWFkeSBzb29uIG9uICR7c2VydmVyLmFkZHJlc3MoKS5hZGRyZXNzfToke3NlcnZlci5hZGRyZXNzKCkucG9ydH1gKTtcbiAgICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
